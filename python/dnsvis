#!/usr/bin/env python3
import argparse
from pathlib import Path
from re import X
import numpy as np
import dns
import pyvista as pv

def main():

    parser = argparse.ArgumentParser(
        description="Produce 3D visualizations of a state",
    )
    parser.add_argument("state", type=str, help="path to the state.")
    parser.add_argument(
        "--noshow", action="store_true", dest="noshow", help="do not display the plots."
    )
    parser.add_argument(
        "--undotilt",
        action="store_true",
        dest="undotilt",
        help="rotate u and w to be parallel/orthogonal to the forcing.",
    )    
    parser.add_argument(
        "--sublam",
        action="store_true",
        dest="sublam",
        help="remove laminar part from states.",
    )
    parser.add_argument(
        "-cvel", 
        default=0.75, 
        dest="cvel",
        help="multiplier for velocity isosurfaces"
    )
    parser.add_argument(
        "-cvor", 
        default=0.5, 
        dest="cvor",
        help="multiplier for vorticity isosurfaces"
    )
    

    args = vars(parser.parse_args())

    args['cvel']=float(args['cvel'])    
    args['cvor']=float(args['cvor'])

    print(args)

    dnsvis(**args)


def dnsvis(
    state,
    noshow = False,
    undotilt = False, 
    sublam = False,
    cvel = 0.75,
    cvor = 0.5
):

    pv.set_plot_theme("document")
    state = Path(state).resolve()
    figuresDir = dns.createFiguresDir(state.parent)
    stateIn, headers = dns.readState(state)

    forcing, nx, ny, nz, Lx, Lz, Re, tilt_angle, dt, itime, time = headers
    ny_half = ny // 2

    if sublam:
        stateIn = stateIn - dns.laminar(forcing, nx, ny_half, nz, tilt_angle=tilt_angle)

    uw_untilted = False
    if abs(tilt_angle) > 0 and undotilt:
        uw_untilted = True
        stateIn = dns.tilt_state(stateIn, tilt_angle)

    vel_phys = dns.fftSpecToPhysAll(stateIn)
    vor_spec = dns.vorticity(stateIn, Lx, Lz)
    vor_phys = dns.fftSpecToPhysAll(vor_spec)

    velx = vel_phys[:, :, :, 0]
    vorx = vor_phys[:, :, :, 0]

    u = pv.wrap(velx)
    om = pv.wrap(vorx)

    # pv.plot(u.contour(0))

    x_label = "$x$"
    y_label = "$y$"
    z_label = "$z$"

    vel_levels = cvel * np.array([np.min(velx), np.max(velx)])
    vor_levels = cvor * np.array([np.min(vorx), np.max(vorx)])

    p = pv.Plotter()
    p.add_mesh(u.outline(), color="k")
    p.add_mesh(u.contour(vel_levels), 
                smooth_shading= True,
                opacity = 0.35, 
                cmap = ['red', 'blue'], 
                clim = vel_levels, 
                show_scalar_bar=False)
    p.add_mesh(om.contour(vor_levels), 
                smooth_shading= True,
                opacity = 0.35, 
                cmap = ['green', 'purple'], 
                clim = vor_levels,
                show_scalar_bar=False)
    p.show_axes()

    # u.plot()
    # print(type(u))


    if not noshow:
        p.show()


if __name__ == "__main__":
    main()
